//①counterSlice.jsのコードをコピペ
//createSliceをインポート
import { createSlice } from '@reduxjs/toolkit';

//②initialStateを定義
const initialState = {
    idCount: 3,
  tasks:[
    {id:3, title: "TASK C", completed: false},
    {id:2, title: "TASK B", completed: true},
    {id:1, title: "TASK A", completed: false},
  ],
  status: 'idle',
};

//③Slice名を変更、nameを変更
export const taskSlice = createSlice({
  name: 'task',
  initialState,
  //reducersを定義　increment アクション等
  //④reducersにactionを定義
  reducers: {
    newTask: (state, action) => {
      state.idCount ++;
      const newItem = {
        id: state.idCount,
        title: action.payload,
        completed: false,
      };
      state.tasks = [newItem , ...state.tasks]
    },
    completeTask: (state, action) => {
      const task = state.tasks.find((t)=> t.id === action.payload.id);
      if (task) {
        task.completed = !task.completed;
      }
    
    },
    //アクションはpayloadに引数を持てる
    deleteTask: (state, action) => {
      state.tasks = state.tasks.filter((t)=> t.id !== action.payload.id);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
//   extraReducers: (builder) => {
//     builder
//       .addCase(incrementAsync.pending, (state) => {
//         state.status = 'loading';
//       })
//       .addCase(incrementAsync.fulfilled, (state, action) => {
//         state.status = 'idle';
//         state.value += action.payload;
//       });
//   },
});

//⑤アクションを他のコンポーネントで使用できるようにエクスポート
export const { newTask, completeTask, deleteTask } = taskSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
//⑥select〇〇の名称を変更、state.xxを変更
export const selectTasks = (state) => state.task.tasks;

//⑦xxSliceの名称を変更　store.jsへ移動
export default taskSlice.reducer;
